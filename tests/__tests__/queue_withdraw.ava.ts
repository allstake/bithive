import {
  getUserActiveDepositsLen,
  getUserQueueWithdrawDepositsLen,
  listUserQueueWithdrawDeposits,
} from "./helpers/btc_client";
import { initUnit } from "./helpers/context";
import { DepositTransactionBuilder } from "./helpers/txn_builder";
import { assertFailure } from "./helpers/utils";

const test = initUnit();

test("queue withdraw with invalid signature", async (t) => {
  const { contract, alice } = t.context.accounts;
  const allstakePubkey = t.context.allstakePubkey;
  // real user pubkey from unisat
  const userPubkey = Buffer.from(
    "0299b4097603b073aa2390203303fe0e60c87bd2af8e621a3df22818c40e3dd217",
    "hex",
  );
  const builder = new DepositTransactionBuilder({
    userPubkey,
    allstakePubkey,
    amount: 1e8,
  });
  // this signature is generated by another keypair
  const sig =
    "20a45827b7a38be86f9ceeb41033953e0da38aa8d1bd24514b1cfd8896e08b3c075f77bac2eb8ed0a5853894df68fc32a68bbbae1428377da58ce923db822e62a2";
  await assertFailure(
    t,
    builder.queueWithdraw(contract, sig, alice),
    "Invalid bitcoin signature",
  );
});

test("queue withdraw with invaid deposit ID", async (t) => {
  const { contract, alice } = t.context.accounts;
  const allstakePubkey = t.context.allstakePubkey;
  // real user pubkey from unisat
  const userPubkey = Buffer.from(
    "0299b4097603b073aa2390203303fe0e60c87bd2af8e621a3df22818c40e3dd217",
    "hex",
  );
  const builder = new DepositTransactionBuilder({
    userPubkey,
    allstakePubkey,
    amount: 1e8,
  });
  const sig =
    "1fb04a55cd9ce328e175df6f436963d3f15e20a70ea623f7d8ed19f9e2ba15e7c44f3aab2e36b75dc0d27e1f9ff777582d9d9c6ba896dec78ef3639dd7653b23f6";
  await assertFailure(
    t,
    builder.queueWithdraw(contract, sig, alice),
    "Deposit is not active",
  );
});

test("valid queue withdraw", async (t) => {
  const { contract, alice } = t.context.accounts;
  const allstakePubkey = t.context.allstakePubkey;
  // real user pubkey from unisat
  const userPubkey = Buffer.from(
    "0299b4097603b073aa2390203303fe0e60c87bd2af8e621a3df22818c40e3dd217",
    "hex",
  );
  const builder = new DepositTransactionBuilder({
    userPubkey,
    allstakePubkey,
    amount: 1e8,
  });
  await builder.submit(contract, alice);

  const sig =
    "1fb04a55cd9ce328e175df6f436963d3f15e20a70ea623f7d8ed19f9e2ba15e7c44f3aab2e36b75dc0d27e1f9ff777582d9d9c6ba896dec78ef3639dd7653b23f6";
  await builder.queueWithdraw(contract, sig, alice);

  t.is(await getUserActiveDepositsLen(contract, builder.userPubkeyHex), 0);
  t.is(
    await getUserQueueWithdrawDepositsLen(contract, builder.userPubkeyHex),
    1,
  );

  const deposits = await listUserQueueWithdrawDeposits(
    contract,
    builder.userPubkeyHex,
    0,
    1,
  );
  t.assert(deposits[0].queue_withdraw_ts > 0);
  t.is(deposits[0].queue_withdraw_sig, sig);
});

test("queue withdraw multiple times", async (t) => {
  const { contract, alice } = t.context.accounts;
  const allstakePubkey = t.context.allstakePubkey;
  // real user pubkey from unisat
  const userPubkey = Buffer.from(
    "0299b4097603b073aa2390203303fe0e60c87bd2af8e621a3df22818c40e3dd217",
    "hex",
  );
  const builder = new DepositTransactionBuilder({
    userPubkey,
    allstakePubkey,
    amount: 1e8,
  });
  await builder.submit(contract, alice);

  const sig =
    "1fb04a55cd9ce328e175df6f436963d3f15e20a70ea623f7d8ed19f9e2ba15e7c44f3aab2e36b75dc0d27e1f9ff777582d9d9c6ba896dec78ef3639dd7653b23f6";
  await builder.queueWithdraw(contract, sig, alice);
  await assertFailure(
    t,
    builder.queueWithdraw(contract, sig, alice),
    "Deposit is not active",
  );
});
