import {
  getUserActiveDepositsLen,
  getUserQueueWithdrawalDepositsLen,
  listUserQueueWithdrawalDeposits,
} from "./helpers/btc_client";
import { initUnit } from "./helpers/context";
import { TestTransactionBuilder } from "./helpers/txn_builder";
import { assertFailure } from "./helpers/utils";

const test = initUnit();

test("queue withdraw with invalid signature", async (t) => {
  const { contract, alice } = t.context.accounts;
  const allstakePubkey = t.context.allstakePubkey;
  // real user pubkey from unisat
  const userPubkey = t.context.unisatPubkey;
  const builder = new TestTransactionBuilder(contract, alice, {
    userPubkey,
    allstakePubkey,
  });
  // this signature is generated by another keypair
  const sig =
    "20a45827b7a38be86f9ceeb41033953e0da38aa8d1bd24514b1cfd8896e08b3c075f77bac2eb8ed0a5853894df68fc32a68bbbae1428377da58ce923db822e62a2";
  await assertFailure(
    t,
    builder.queueWithdraw(sig),
    "Invalid bitcoin signature",
  );
});

test("queue withdraw with invaid deposit ID", async (t) => {
  const { contract, alice } = t.context.accounts;
  const allstakePubkey = t.context.allstakePubkey;
  // real user pubkey from unisat
  const userPubkey = t.context.unisatPubkey;
  const builder = new TestTransactionBuilder(contract, alice, {
    userPubkey,
    allstakePubkey,
  });
  await assertFailure(
    t,
    builder.queueWithdraw(t.context.unisatSig),
    "Deposit is not active",
  );
});

test("valid queue withdraw", async (t) => {
  const { contract, alice } = t.context.accounts;
  const allstakePubkey = t.context.allstakePubkey;
  // real user pubkey from unisat
  const userPubkey = t.context.unisatPubkey;
  const builder = new TestTransactionBuilder(contract, alice, {
    userPubkey,
    allstakePubkey,
  });
  await builder.submit();

  await builder.queueWithdraw(t.context.unisatSig);

  t.is(await getUserActiveDepositsLen(contract, builder.userPubkeyHex), 0);
  t.is(
    await getUserQueueWithdrawalDepositsLen(contract, builder.userPubkeyHex),
    1,
  );

  const deposits = await listUserQueueWithdrawalDeposits(
    contract,
    builder.userPubkeyHex,
    0,
    1,
  );
  t.assert(deposits[0].queue_withdraw_ts > 0);
  t.is(deposits[0].queue_withdraw_sig, t.context.unisatSig);
});

test("queue withdraw multiple times", async (t) => {
  const { contract, alice } = t.context.accounts;
  const allstakePubkey = t.context.allstakePubkey;
  // real user pubkey from unisat
  const userPubkey = t.context.unisatPubkey;
  const builder = new TestTransactionBuilder(contract, alice, {
    userPubkey,
    allstakePubkey,
  });
  await builder.submit();

  await builder.queueWithdraw(t.context.unisatSig);
  await assertFailure(
    t,
    builder.queueWithdraw(t.context.unisatSig),
    "Deposit is not active",
  );
});
